diff --git a/webrtc/sdk/objc/Framework/Classes/RTCMediaStream+Private.h b/webrtc/sdk/objc/Framework/Classes/RTCMediaStream+Private.h
index 7f87072..ac55615 100644
--- a/webrtc/sdk/objc/Framework/Classes/RTCMediaStream+Private.h
+++ b/webrtc/sdk/objc/Framework/Classes/RTCMediaStream+Private.h
@@ -31,6 +31,15 @@ NS_ASSUME_NONNULL_BEGIN
 - (instancetype)initWithNativeMediaStream:
     (rtc::scoped_refptr<webrtc::MediaStreamInterface>)nativeMediaStream;
 
+- (void)update;
+- (BOOL)hasNativeAudioTrack:(RTCAudioTrack *)objcTrack;
+- (BOOL)hasNativeVideoTrack:(RTCVideoTrack *)objcTrack;
+- (BOOL)hasObjcAudioTrack:
+    (rtc::scoped_refptr<webrtc::AudioTrackInterface>)nativeTrack;
+- (BOOL)hasObjcVideoTrack:
+    (rtc::scoped_refptr<webrtc::VideoTrackInterface>)nativeTrack;
+
+
 @end
 
 NS_ASSUME_NONNULL_END
diff --git a/webrtc/sdk/objc/Framework/Classes/RTCMediaStream.mm b/webrtc/sdk/objc/Framework/Classes/RTCMediaStream.mm
index 0737dee..4bab6b2 100644
--- a/webrtc/sdk/objc/Framework/Classes/RTCMediaStream.mm
+++ b/webrtc/sdk/objc/Framework/Classes/RTCMediaStream.mm
@@ -13,17 +13,35 @@
 #include <vector>
 
 #import "NSString+StdString.h"
-#import "RTCAudioTrack+Private.h"
 #import "RTCMediaStreamTrack+Private.h"
+#import "RTCAudioTrack+Private.h"
 #import "RTCPeerConnectionFactory+Private.h"
 #import "RTCVideoTrack+Private.h"
 
+namespace webrtc {
+  class RTCMediaStreamObserver : public ObserverInterface {
+    public:
+    RTCMediaStreamObserver(RTCMediaStream* stream) { _stream = stream; }
+
+    void OnChanged() override {
+      [_stream update];
+    }
+
+   private:
+    __weak RTCMediaStream* _stream;
+  };
+}
+
+
 @implementation RTCMediaStream {
   NSMutableArray *_audioTracks;
   NSMutableArray *_videoTracks;
   rtc::scoped_refptr<webrtc::MediaStreamInterface> _nativeMediaStream;
+  std::unique_ptr<webrtc::RTCMediaStreamObserver> _observer;
 }
 
+@synthesize delegate = _delegate;
+
 - (instancetype)initWithFactory:(RTCPeerConnectionFactory *)factory
                        streamId:(NSString *)streamId {
   NSParameterAssert(factory);
@@ -48,13 +66,11 @@ - (NSString *)streamId {
 
 - (void)addAudioTrack:(RTCAudioTrack *)audioTrack {
   if (_nativeMediaStream->AddTrack(audioTrack.nativeAudioTrack)) {
-    [_audioTracks addObject:audioTrack];
   }
 }
 
 - (void)addVideoTrack:(RTCVideoTrack *)videoTrack {
   if (_nativeMediaStream->AddTrack(videoTrack.nativeVideoTrack)) {
-    [_videoTracks addObject:videoTrack];
   }
 }
 
@@ -64,7 +80,6 @@ - (void)removeAudioTrack:(RTCAudioTrack *)audioTrack {
            @"|removeAudioTrack| called on unexpected RTCAudioTrack");
   if (index != NSNotFound &&
       _nativeMediaStream->RemoveTrack(audioTrack.nativeAudioTrack)) {
-    [_audioTracks removeObjectAtIndex:index];
   }
 }
 
@@ -74,7 +89,6 @@ - (void)removeVideoTrack:(RTCVideoTrack *)videoTrack {
            @"|removeVideoTrack| called on unexpected RTCVideoTrack");
   if (index != NSNotFound &&
       _nativeMediaStream->RemoveTrack(videoTrack.nativeVideoTrack)) {
-    [_videoTracks removeObjectAtIndex:index];
   }
 }
 
@@ -101,6 +115,8 @@ - (instancetype)initWithNativeMediaStream:
     _audioTracks = [NSMutableArray arrayWithCapacity:audioTracks.size()];
     _videoTracks = [NSMutableArray arrayWithCapacity:videoTracks.size()];
     _nativeMediaStream = nativeMediaStream;
+    _observer.reset(new webrtc::RTCMediaStreamObserver(self));
+    _nativeMediaStream->RegisterObserver(_observer.get());
 
     for (auto &track : audioTracks) {
       RTCMediaStreamTrackType type = RTCMediaStreamTrackTypeAudio;
@@ -119,4 +135,153 @@ - (instancetype)initWithNativeMediaStream:
   return self;
 }
 
+- (void)dealloc {
+  _nativeMediaStream->UnregisterObserver(_observer.get());
+}
+
+- (void)update {
+  size_t i;
+  webrtc::AudioTrackVector native_audio_tracks = _nativeMediaStream->GetAudioTracks();
+  webrtc::VideoTrackVector native_video_tracks = _nativeMediaStream->GetVideoTracks();
+  std::vector<size_t> removedAudioTrackIndexes;
+  std::vector<size_t> removedVideoTrackIndexes;
+
+  // Detect audio tracks removal.
+  for (i = 0; i < [_audioTracks count]; i++) {
+    RTCAudioTrack* objcTrack = [_audioTracks objectAtIndex:i];
+//    NSNumber* index;
+
+    if (![self hasNativeAudioTrack:objcTrack]) {
+      removedAudioTrackIndexes.push_back(i);
+    }
+  }
+
+  // Detect video tracks removal.
+  for (i = 0; i < [_videoTracks count]; i++) {
+    RTCVideoTrack* objcTrack = [_videoTracks objectAtIndex:i];
+//    NSNumber* index;
+
+    if (![self hasNativeVideoTrack:objcTrack]) {
+      removedVideoTrackIndexes.push_back(i);
+    }
+  }
+
+  // Remove old audio tracks and notify the delegate.
+  for (std::vector<size_t>::iterator it = removedAudioTrackIndexes.begin();
+    it != removedAudioTrackIndexes.end(); ++it) {
+    RTCAudioTrack* objcTrack = [_audioTracks objectAtIndex:*it];
+
+    // Remove the track from the ObjC container.
+    [_audioTracks removeObjectAtIndex:*it];
+
+    // Notify the delegate.
+    [_delegate OnRemoveAudioTrack:self track:objcTrack];
+  }
+
+  // Remove old video tracks and notify the delegate.
+  for (std::vector<size_t>::iterator it = removedVideoTrackIndexes.begin();
+    it != removedVideoTrackIndexes.end(); ++it) {
+    RTCVideoTrack* objcTrack = [_videoTracks objectAtIndex:*it];
+
+    // Remove the track from the ObjC container.
+    [_videoTracks removeObjectAtIndex:*it];
+
+    // Notify the delegate.
+    [_delegate OnRemoveVideoTrack:self track:objcTrack];
+  }
+
+  // Detect audio tracks addition and notify the delegate.
+  for (i = 0; i < native_audio_tracks.size(); ++i) {
+    rtc::scoped_refptr<webrtc::AudioTrackInterface> nativeTrack =
+      native_audio_tracks[i];
+
+    if (![self hasObjcAudioTrack:nativeTrack]) {
+      // Create the RTCAudioTrack instance and add it to the ObjC container.
+      RTCAudioTrack* objcTrack =
+        [[RTCAudioTrack alloc] initWithNativeTrack:nativeTrack];
+      [_audioTracks addObject:objcTrack];
+
+      // Notify the delegate.
+      [_delegate OnAddAudioTrack:self track:objcTrack];
+    }
+  }
+
+  // Detect video tracks addition and notify the delegate.
+  for (i = 0; i < native_video_tracks.size(); ++i) {
+    rtc::scoped_refptr<webrtc::VideoTrackInterface> nativeTrack =
+      native_video_tracks[i];
+
+    if (![self hasObjcVideoTrack:nativeTrack]) {
+      // Create the RTCVideoTrack instance and add it to the ObjC container.
+      RTCVideoTrack* objcTrack =
+        [[RTCVideoTrack alloc] initWithNativeTrack:nativeTrack];
+      [_videoTracks addObject:objcTrack];
+
+      // Notify the delegate.
+      [_delegate OnAddVideoTrack:self track:objcTrack];
+    }
+  }
+
+  unsigned long num_native_audios = native_audio_tracks.size();
+  unsigned long num_native_videos = native_video_tracks.size();
+  unsigned long num_objc_audios = (unsigned long)[_audioTracks count];
+  unsigned long num_objc_videos = (unsigned long)[_videoTracks count];
+
+  NSAssert(num_native_audios == num_objc_audios,
+    @"ObjC audio tracks does not match number of native audio tracks");
+
+  NSAssert(num_native_videos == num_objc_videos,
+    @"ObjC video tracks does not match number of native video tracks");
+}
+
+- (BOOL)hasNativeAudioTrack:(RTCAudioTrack *)objcTrack {
+  webrtc::AudioTrackVector audio_tracks = _nativeMediaStream->GetAudioTracks();
+
+  for (size_t i = 0; i < audio_tracks.size(); ++i) {
+    rtc::scoped_refptr<webrtc::AudioTrackInterface> track = audio_tracks[i];
+
+    if (track->id().compare(objcTrack.nativeAudioTrack->id()) == 0) {
+      return YES;
+    }
+  }
+  return NO;
+}
+
+- (BOOL)hasNativeVideoTrack:(RTCVideoTrack *)objcTrack {
+  webrtc::VideoTrackVector video_tracks = _nativeMediaStream->GetVideoTracks();
+
+  for (size_t i = 0; i < video_tracks.size(); ++i) {
+    rtc::scoped_refptr<webrtc::VideoTrackInterface> track = video_tracks[i];
+
+    if (track->id().compare(objcTrack.nativeVideoTrack->id()) == 0) {
+      return YES;
+    }
+  }
+  return NO;
+}
+
+- (BOOL)hasObjcAudioTrack:
+    (rtc::scoped_refptr<webrtc::AudioTrackInterface>)nativeTrack {
+  for (size_t i = 0; i < [_audioTracks count]; i++) {
+    RTCAudioTrack* track = [_audioTracks objectAtIndex:i];
+
+    if (track.nativeAudioTrack->id().compare(nativeTrack->id()) == 0) {
+      return YES;
+    }
+  }
+  return NO;
+}
+
+- (BOOL)hasObjcVideoTrack:
+    (rtc::scoped_refptr<webrtc::VideoTrackInterface>)nativeTrack {
+  for (size_t i = 0; i < [_videoTracks count]; i++) {
+    RTCVideoTrack* track = [_videoTracks objectAtIndex:i];
+
+    if (track.nativeVideoTrack->id().compare(nativeTrack->id()) == 0) {
+      return YES;
+    }
+  }
+  return NO;
+}
+
 @end
diff --git a/webrtc/sdk/objc/Framework/Headers/WebRTC/RTCMediaStream.h b/webrtc/sdk/objc/Framework/Headers/WebRTC/RTCMediaStream.h
index b97960d..32d1566 100644
--- a/webrtc/sdk/objc/Framework/Headers/WebRTC/RTCMediaStream.h
+++ b/webrtc/sdk/objc/Framework/Headers/WebRTC/RTCMediaStream.h
@@ -17,6 +17,21 @@ NS_ASSUME_NONNULL_BEGIN
 @class RTCAudioTrack;
 @class RTCPeerConnectionFactory;
 @class RTCVideoTrack;
+@class RTCMediaStream;
+@class RTCMediaStreamTrack;
+
+@protocol RTCMediaStreamDelegate<NSObject>
+
+- (void)OnAddAudioTrack:
+    (RTCMediaStream*)mediaStream track:(RTCMediaStreamTrack*)track;
+- (void)OnAddVideoTrack:
+    (RTCMediaStream*)mediaStream track:(RTCMediaStreamTrack*)track;
+- (void)OnRemoveAudioTrack:
+    (RTCMediaStream*)mediaStream track:(RTCMediaStreamTrack*)track;
+- (void)OnRemoveVideoTrack:
+    (RTCMediaStream*)mediaStream track:(RTCMediaStreamTrack*)track;
+
+@end
 
 RTC_EXPORT
 @interface RTCMediaStream : NSObject
@@ -29,6 +44,7 @@ RTC_EXPORT
 
 /** An identifier for this media stream. */
 @property(nonatomic, readonly) NSString *streamId;
+@property(nonatomic, weak) id<RTCMediaStreamDelegate> delegate;
 
 - (instancetype)init NS_UNAVAILABLE;
 
